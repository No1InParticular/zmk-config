/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

&led_strip { chain-length = <27>; };

/ {
    behaviors {
        ht_home: ht_home {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_HOME";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp SQT           &kp Q                &kp W                &kp E                  &kp R             &kp T        &kp Y    &kp U             &kp I                   &kp O                 &kp P                         &kp GRAVE
&kp LEFT_BRACKET  &ht_home LEFT_GUI A  &ht_home LEFT_ALT S  &ht_home LEFT_SHIFT D  &ht_home LCTRL F  &kp G        &kp H    &ht_home RCTRL J  &ht_home RIGHT_SHIFT K  &ht_home RIGHT_ALT L  &ht_home RIGHT_GUI SEMICOLON  &kp RIGHT_BRACKET
&kp BACKSLASH     &kp Z                &kp X                &kp C                  &kp V             &kp B        &kp N    &kp M             &kp COMMA               &kp DOT               &kp AT_SIGN                   &kp SLASH
                                                            &kp TAB                &mo 1             &kp SPACE    &kp RET  &mo 2             &kp BACKSPACE
            >;
        };

        left_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ESCAPE  &trans  &trans    &kp UP    &trans     &trans       &trans   &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans        &kp BSPC
&trans      &trans  &kp LEFT  &kp DOWN  &kp RIGHT  &trans       &trans   &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &trans        &trans
&trans      &trans  &trans    &trans    &trans     &trans       &trans   &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0  &trans
                              &trans    &trans     &kp SPACE    &kp RET  &trans        &trans
            >;
        };

        right_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ESCAPE  &kp EXCL  &kp DOUBLE_QUOTES  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp BSPC
&trans      &trans    &trans             &trans    &trans    &trans       &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
&trans      &trans    &trans             &trans    &trans    &trans       &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
                                         &trans    &trans    &kp SPACE    &kp RET    &trans     &trans
            >;
        };

        both_layer {
            bindings = <
&trans      &trans        &trans        &trans        &trans        &trans          &trans  &trans           &trans           &rgb_ug RGB_EFF                    &rgb_ug RGB_EFR                    &trans
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &rgb_ug RGB_COLOR_HSB(264,100,50)  &rgb_ug RGB_COLOR_HSB(0,100,50)    &rgb_ug RGB_TOG
&trans      &trans        &trans        &trans        &trans        &trans          &trans  &trans           &trans           &rgb_ug RGB_COLOR_HSB(119,100,49)  &rgb_ug RGB_COLOR_HSB(301,100,50)  &trans
                                        &trans        &trans        &trans          &trans  &trans           &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Both {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
